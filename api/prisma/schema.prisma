// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  price         Int
  discountPrice Int?
  size          Float
  furnished     Boolean
  parking       Boolean
  type          Type
  category      Category
  productType   ProductType
  property      Property?
  offer         Boolean
  active        Boolean
  landId        String?     @db.ObjectId
  buildingId    String?     @db.ObjectId
  mediaId       String?     @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  land          Land?       @relation(fields: [landId], references: [id])
  building      Building?   @relation(fields: [buildingId], references: [id])
  media         Media?      @relation(fields: [mediaId], references: [id])
  savedPosts    SavedPost[]
}

enum ProductType {
  land
  building
  unit
}

enum Category {
  residential
  commercial
  industrial
  agricultural
  specialPurpose
  mixedUse
  vacantLand
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  townhouse
  villa
  duplex
  penthouse
  studio
  loft
  mansion
  cottage
  bungalow
  farmhouse
  ranch
  chalet
  mobileHome
  land
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  isAdmin    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  posts      Product[]
  savedPosts SavedPost[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])
  chatIDs    String[]    @db.ObjectId
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]    @relation(fields: [userIDs], references: [id])
  userIDs     String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  seenBy      String[]  @db.ObjectId
  messages    Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Location {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  country        String
  stateRegion    String
  districtCounty String
  ward           String
  streetVillage  String
  latitude       String
  longitude      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lands          Land[] // Adjusted relationship
}

model Land {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  customId         String     @unique
  name             String
  size             Int
  description      String
  features         String[]   @default([])
  zoning           String?
  soilStructure    String?
  topography       String?
  postalZipCode    String?
  registered       Boolean    @default(false)
  registrationDate DateTime?
  accessibility    String?
  locationId       String     @unique @db.ObjectId
  location         Location   @relation(fields: [locationId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  buildings        Building[]
  products         Product[]
}

model Building {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  customId             String    @unique
  numberOfFloors       Int
  yearBuilt            Int?
  name                 String
  type                 String?
  size                 Float?
  description          String?
  features             String[]
  totalBedrooms        Int?
  totalBathrooms       Int?
  parkingSpaces        Int?
  amenities            String[]
  utilities            String?
  maintenanceCost      Float?
  managementCompany    String?
  constructionMaterial String?
  architect            String?
  uses                 String?
  yearUpgraded         Int?
  landId               String    @unique @db.ObjectId
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  land                 Land      @relation(fields: [landId], references: [id])
  products             Product[]
  units                Unit[]
}

model Unit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  bathRoom     Int?
  bedRoom      Int?
  numberOfUnit String
  floorLevel   Int
  size         Float
  description  String?
  amenities    String[]
  utilities    String?
  features     String?
  unitType     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  buildingId   String   @db.ObjectId
  building     Building @relation(fields: [buildingId], references: [id])
}

model Media {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl               String?
  imageTitle             String?
  imageDescription       String?
  videoUrl               String?
  videoTitle             String?
  videoDescription       String?
  virtualTourUrl         String?
  virtualTourTitle       String?
  virtualTourDescription String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  products               Product[]
}
