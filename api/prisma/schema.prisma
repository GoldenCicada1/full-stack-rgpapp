// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  customId   String        @unique
  active     Boolean?
  status     ProductStatus
  category   Category
  landId     String?       @db.ObjectId
  buildingId String?       @db.ObjectId
  mediaId    String?       @db.ObjectId
  user       User          @relation(fields: [userId], references: [id])
  userId     String        @db.ObjectId
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  land       Land?         @relation(fields: [landId], references: [id])
  building   Building?     @relation(fields: [buildingId], references: [id])
  media      Media?        @relation(fields: [mediaId], references: [id])
  leaseId    String?       @db.ObjectId
  savedPosts SavedPost[]
  Lease      Lease?
}

enum ProductStatus {
  forRent
  forSale
  both
}

enum Category {
  residential
  commercial
  industrial
  specialPurpose
  mixedUse

  agricultural
  vacantLand
  openSpaceRecreational
}

enum Property {
  apartment
  house
  condo
  townhouse
  villa
  duplex
  penthouse
  studio
  loft
  mansion
  cottage
  bungalow
  farmhouse
  ranch
  chalet
  mobileHome
  land
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  isAdmin    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  posts      Product[]
  savedPosts SavedPost[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])
  chatIDs    String[]    @db.ObjectId
  leases     Lease[]
  auditLogs  AuditLog[]
}

model Admin {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  username  String     @unique
  password  String
  isActive  Boolean    @default(true)
  avatar    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]    @relation(fields: [userIDs], references: [id])
  userIDs     String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  seenBy      String[]  @db.ObjectId
  messages    Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Location {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  country        String
  stateRegion    String
  districtCounty String
  ward           String
  streetVillage  String
  latitude       String
  longitude      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lands          Land[] // Adjusted relationship
}

model Land {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  customId         String     @unique
  name             String
  size             Int
  description      String
  features         String[]   @default([])
  zoning           String?
  soilStructure    String?
  topography       String?
  postalZipCode    String?
  registered       Boolean    @default(false)
  registrationDate DateTime?
  accessibility    String?
  locationId       String     @unique @db.ObjectId
  location         Location   @relation(fields: [locationId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  buildings        Building[]
  products         Product[]
}

model Building {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  customId             String    @unique
  numberOfFloors       Int
  yearBuilt            Int?
  name                 String
  type                 String?
  size                 Float?
  description          String?
  features             String[]
  totalBedrooms        Int?
  totalBathrooms       Int?
  parkingSpaces        Int?
  amenities            String[]
  utilities            String?
  furnished            Boolean?
  maintenanceCost      Float?
  managementCompany    String?
  constructionMaterial String?
  architect            String?
  uses                 String?
  yearUpgraded         Int?
  landId               String    @db.ObjectId
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  land                 Land      @relation(fields: [landId], references: [id])
  products             Product[]
  units                Unit[]
}

model Unit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customId    String   @unique
  bathRoom    Int?
  bedRoom     Int?
  unitName    String
  floorLevel  Int
  furnished   Boolean?
  size        Float
  description String?
  amenities   String[]
  utilities   String[]
  features    String[]
  unitType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  buildingId  String   @db.ObjectId
  building    Building @relation(fields: [buildingId], references: [id])
}

model Media {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl               String?
  imageTitle             String?
  imageDescription       String?
  videoUrl               String?
  videoTitle             String?
  videoDescription       String?
  virtualTourUrl         String?
  virtualTourTitle       String?
  virtualTourDescription String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  products               Product[]
}

model Lease {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  productId            String                 @unique @db.ObjectId
  userId               String?                @db.ObjectId
  leaseNumber          String                 @unique
  price                Int
  rentalPeriod         RentalPeriod
  discountPrice        Int?
  discountDuration     Int?
  status               LeaseStatus
  paymentSchedule      PaymentSchedule[]
  documents            Document[]
  termsAndConditions   String?
  availabilityCalendar AvailabilityCalendar[]
  contract             Contract?              @relation
  bookings             Booking[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  user                 User?                  @relation(fields: [userId], references: [id])
  product              Product                @relation(fields: [productId], references: [id])
}

enum RentalPeriod {
  daily
  weekly
  monthly
  yearly
}

enum LeaseStatus {
  active
  terminated
  renewed
  pending
}

model Booking {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  productId  String        @db.ObjectId
  userId     String        @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  status     BookingStatus
  product    Lease         @relation(fields: [productId], references: [productId])
}

enum BookingStatus {
  pending
  confirmed
  canceled
}

model AvailabilityCalendar {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  date      DateTime
  available Boolean
  price     Int?
  product   Lease    @relation(fields: [productId], references: [productId])
}

model Contract {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  leaseId      String   @unique @db.ObjectId
  lease        Lease    @relation(fields: [leaseId], references: [id])
  contractDate DateTime
  startDate    DateTime
  endDate      DateTime
  terms        String
  parties      String[]
  signatures   String[] // or use a separate signature table
  // other contract details
}

model PaymentSchedule {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  leaseId       String        @db.ObjectId
  amount        Int?
  dueDate       DateTime
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  lease Lease @relation(fields: [leaseId], references: [id])
}

enum PaymentStatus {
  pending
  paid
  overdue
}

model Document {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  leaseId      String       @db.ObjectId
  documentType DocumentType
  content      String // or use a file storage system
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  lease Lease @relation(fields: [leaseId], references: [id])
}

enum DocumentType {
  addendum
  inspectionReport
  other
}

model AuditLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  action      String
  targetModel String
  targetId    String
  changes     Json
  user        User     @relation(fields: [actorId], references: [id])
  admin       Admin    @relation(fields: [actorId], references: [id])
  actorId     String   @db.ObjectId
  createdAt   DateTime @default(now())
}
